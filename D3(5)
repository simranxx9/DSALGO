#include<bits/stdc++.h>
#include<iostream>
using namespace std;
int uniquePaths(int i,int j,int m, int n) {
        if(i == (m-1)&& j == (n-1))
            return 1;
        if(i>=m || j>=n) 
            return 0;
        else 
            return uniquePaths(i+1,j,m,n) + uniquePaths(i,j+1,m,n);
    }
int main()
{
    int cnt = uniquePaths(0,0,2,3);
    cout<<cnt<<endl;
}


//using dp



#include<bits/stdc++.h>
#include<vector>
using namespace std;
int uniquePaths(int i,int j,int m, int n,vector<vector<int>> dp) {
    if(i>=m || j>=n) 
            return 0;
        if(i == (m-1)&& j == (n-1))
            return 1;
            if(dp[i][j]!=-1) return dp[i][j];
        else 
            return dp[i][j] = uniquePaths(i+1,j,m,n,dp) + uniquePaths(i,j+1,m,n,dp);
    }
int main()
{
    vector<vector<int>> vec( 2 , vector<int> (3, -1));
    int cnt = uniquePaths(0,0,2,3,vec);
    cout<<cnt<<endl;
}
